op.name="LineFont";

var render=op.addInPort(new Port(op,"render",OP_PORT_TYPE_FUNCTION));
var string=op.addInPort(new Port(op,"Text",OP_PORT_TYPE_VALUE,{type:'string'}));
string.set("cables");
var meshes=[];
var vec=vec3.create();
var cgl=op.patch.cgl;
var characters=
    [
        {
            // a
            l:[
                [179.667,349.057,161.167,349.057],
                [157.333,360.557,168.333,326.89,172.333,326.89,183,360.557],
            ]    
        },
        {
            // b
            l:
            [
                [174.333,343.057,160.255,343.057],
                [160.333,326.89,175.5,326.89,178.333,330.724,178.333,340.724,174.333,343.057,180.5,346.807,180.5,357.474,176,360.557,160.167,360.557,160.333,326.89]
            ]
        },
        {
            // c
            l:
            [
                [180.583,331.307,175.917,326.807,166,326.807,160.083,332.557,160.083,354.557,165.833,360.474,175.917,360.474,180.5,355.807],
            ]
        },
        {
            // d
            l:
            [
                [160.083,327.057,160.083,360.557,175.417,360.557,180.708,355.265,180.708,332.974,175.104,327.057,160.083,327.057],
            ]
        },
        {
            l:
            [
                // e
                [175.167,343.932,160.436,343.932],
                [177.917,326.807,164.5,326.807,160.436,330.872,160.436,356.845,164.014,360.422,177.917,360.422]
            ]
        },
        {
            l:
            [
                [178.583,326.807,165.917,326.807,161.958,330.765,161.958,360.557],
                [175.25,345.474,161.958,345.474],
            ]
        },
        {
            l:
            [
                [181.833,331.974,176.769,327.909,167.572,327.909,161.546,333.936,161.546,355.512,167.17,360.136,177.417,360.136,182.998,354.555,182.998,344.39,174.5,344.39,	],
            ]
        },
        {
            //h
            l:
            [
                [159.167,326.89,159.167,360.557],
                [159.0,343.723,181.333,343.723],
                [181.333,326.89,181.333,360.974]
            ]
        },
        {
            // i
            l:
            [
                [170.25,326.724,170.25,360.557]
            ]
        },
        {
            // j
            l:
            [
                [163.333,326.89,170.333,326.89,170.333,362.057,167.462,364.928,163.333,364.928],
            ]
        },
        {
            l:
            [
                [160.167,326.807,160.167,360.974],
                [178.917,326.807,160.167,348.474],
                [164.905,342.998,180.333,360.64]
            ]
        },
        {
            //l
            l:
            [
                [164.417,326.974,164.417,360.557,180.333,360.557],
            ]
        },
        {
            l:
            [
                [153.333,360.307,153.333,327.224,158.083,327.224,168.667,360.307,171.167,360.307,181.667,327.224,186.417,327.224,186.417,360.307],
            ]
        },
        {
            l:
            [
                [159.417,360.557,159.417,326.89,163.879,326.89,177.583,360.557,181.333,360.557,181.333,326.89],
            ]
        },
        {
            l:
            [
                [158.667,332.64,164.147,327.159,176.788,327.159,182.051,332.422,182.051,354.557,175.817,360.791,164.75,360.791,158.55,354.59,158.667,332.64],
            ]
        },
        
        {
            l:
            [
                [161,360.307,161,326.89,176.788,326.89,180.5,330.603,180.5,340.89,176.436,344.955,161,344.955],
            ]
        },
        
        {
            // q
            l:
            [
                [182.887,361.919,178.9,357.933],
                [158.667,332.64,164.147,327.159,176.788,327.159,182.051,332.422,182.051,354.557,175.817,360.791,164.75,360.791,158.55,354.59,158.667,332.64],
            ]
        },
        {
            // r
            l:
            [
                [180.5,360.307,174.334,344.955],
                [161,360.307,161,326.89,176.788,326.89,180.5,330.603,180.5,340.89,176.436,344.955,161,344.955],
            ]
        },
        {
            // s
            l:
            [
                [178.333,328.057,164.25,328.057,159.708,332.598,159.708,338.307,178.833,349.057,178.833,355.223,173.458,360.598,159.708,360.598],
            ]
        },
        {
            // t
            l:
            [
                [170.417,326.89,170.417,360.974]
            ]
        },
        {
            // u
            l:
            [
                [159.708,327.14,159.708,356.845,163.65,360.786,177.667,360.786,181.554,356.899,181.5,327.14],
            ]
        },
        {
            // v
            l:
            [
                [158,326.89,168,360.786,172.25,360.786,182.5,326.723],
            ]
        },
        {
            // w
            l:
            [
                [191.333,326.89,183.167,360.307,179.417,360.307,171.833,326.89,167.591,326.89,160.167,360.307,156.417,360.307,148,326.89],
            ]
        },
        {
            // x
            l:
            [
                [181.333,360.64,159.667,326.807],
                [159.667,360.557,181.75,326.807]
            ]
        },
        {
            // y
            l:
            [
                [159.25,326.807,167.591,347.14,173.076,347.14,182,326.807],
                [170.417,347.14,170.417,360.557]
            ]
        },
        {
            // z
            l:
            [
                [161.167,326.807,180.5,326.807,180.5,332.473,161.167,355.223,161.167,360.557,180.5,360.557],
            ]
        },
    

    ];


function translateX(w)
{
    vec3.set(vec, w,0,0);
    mat4.translate(cgl.mvMatrix,cgl.mvMatrix, vec);
}

render.onTriggered=function()
{
    vec3.set(vec, 0.3,0,0);
    cgl.pushMvMatrix();

    for(var i=0;i<string.get().length;i++)
    {
        var w=0;
        var charIndex=string.get().charCodeAt(i)-97;
        
        if(charIndex>=0 && charIndex<characters.length)
        {
            for(var m=0;m<characters[charIndex].m.length;m++)
            {
                characters[charIndex].m[m].render(op.patch.cgl.getShader());        
            }
            translateX(characters[charIndex].w);
            
        }
        if(charIndex+97==32)
        {
            translateX(0.3);
        }
    }

    cgl.popMvMatrix();
};

function avg(which)
{
    var avgX=0,avgY=0;
    var count=0;
    for(var l=0;l<characters[which].l.length;l++)
    {
        for(var j=0;j<characters[which].l[l].length;j+=2)
        {
            avgX+=characters[which].l[l][j];
            avgY+=characters[which].l[l][j+1];
            count++;
        }
    }
    avgX/=count;
    avgY/=count;
    return [avgX,avgY];
}

function min(which)
{
    var min=9999999;

    for(var l=0;l<characters[which].l.length;l++)
    {
        for(var j=0;j<characters[which].l[l].length;j+=2)
        {
            min=Math.min(min,characters[which].l[l][j]);
        }
    }
    return min;
}

function width(which)
{
    var min=9999999;
    var max=-9999999;

    for(var l=0;l<characters[which].l.length;l++)
    {
        for(var j=0;j<characters[which].l[l].length;j+=2)
        {
            min=Math.min(min,characters[which].l[l][j]);
            max=Math.max(max,characters[which].l[l][j]);
        }
    }
    return ((max-min));
}

meshes.length=0;

var avgXY=[];
var avg1=avg(0);
var avg2=avg(1);

avgXY=[ (avg1[0]+avg2[0])/2, (avg1[1]+avg2[1])/2 ];

for(var i=0;i<characters.length;i++)
{
    characters[i].w=width(i)*0.01;
    characters[i].m=[];
    for(var l=0;l<characters[i].l.length;l++)
    {
        var count=0;
        var indices=[];
        var vertices=[];

        for(var j=0;j<characters[i].l[l].length;j+=2)
        {
            vertices.push( (characters[i].l[l][j]-min(i))*0.01 );
            vertices.push( (characters[i].l[l][j+1]-avgXY[1])*-0.01 );
            vertices.push( 0 );
            
            indices.push(count);
            count++;
        }
        
        var geom=new CGL.Geometry();
        geom.vertices=vertices;
        geom.verticesIndices=indices;
        var mesh=new CGL.Mesh(op.patch.cgl,geom);
        characters[i].m.push(mesh);
    }
    
    console.log(i,characters[i].m.length,characters[i].w);
    characters[i].w+=0.1;
}
